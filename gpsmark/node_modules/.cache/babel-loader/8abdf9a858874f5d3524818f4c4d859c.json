{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbermudez/Desktop/project/Project5/GPSmark/gpsmark/src/components/Map.js\";\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { withGoogleMap, withScriptjs, GoogleMap, DirectionsRenderer } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyCTIuglr0yoyg7N3YinUj0xEeKmQCA8VT0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: [],\n      directionsLocal: [],\n      destination: '',\n      latOrigin: 0,\n      lngOrigin: 0,\n      latDestin: 0,\n      lngDestin: 0,\n      destinationAddress: ''\n    };\n\n    this.handleChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        destinationAddress: this.state.destinationAddress\n      });\n    };\n\n    this.geoDestiny = () => {\n      Geocode.fromAddress(\"california\").then(response => {\n        let {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        this.setState({\n          latDestin: lat,\n          lngDestin: lng\n        });\n        console.log(this.state.latDestin, this.state.lngDestin);\n        this.getpositon();\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.displayLocationInfo = position => {\n      let lng2 = position.coords.longitude;\n      let lat2 = position.coords.latitude;\n      console.log(`longitude: ${lat2} | latitude: ${lng2}`);\n      this.setState({\n        latOrigin: lat2,\n        lngOrigin: lng2\n      });\n      console.log('disply' + this.state.lat);\n      this.loadMap();\n    };\n\n    this.getpositon = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.displayLocationInfo);\n      }\n    };\n\n    this.loadMap = () => {\n      console.log(`origin lat: ${this.state.latOrigin}, lng: ${this.state.lngOrigin} `);\n      console.log(`Destino lat:  ${this.state.latDestin}, lng: ${this.state.lngDestin} `);\n      let origin = {\n        lat: this.state.latOrigin,\n        lng: this.state.lngOrigin\n      };\n      let destination = {\n        lat: this.state.latDestin,\n        lng: this.state.lngDestin\n      };\n      const directionsService = new google.maps.DirectionsService();\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.geoDestiny();\n      console.log('component' + this.state.lat);\n    };\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      defaultCenter: {\n        lat: 40.756795,\n        lng: -73.954298\n      },\n      defaultZoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapExample, {\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `500px`,\n          width: \"500px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 54\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"lable\", {\n      htmlFor: \"description\",\n      className: \"col-sm-1 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 10\n      }\n    }, \"URL:\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-sm-11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"url\",\n      required: true,\n      value: this.state.url,\n      className: \"form-control\",\n      id: \"url\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 8\n      }\n    }, this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map(elemen => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 102\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: elemen.instructions\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 108\n      }\n    }), \" \")) : ''));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/alexanderbermudez/Desktop/project/Project5/GPSmark/gpsmark/src/components/Map.js"],"names":["React","Component","withGoogleMap","withScriptjs","GoogleMap","DirectionsRenderer","Geocode","setApiKey","enableDebug","Map","state","directions","directionsLocal","destination","latOrigin","lngOrigin","latDestin","lngDestin","destinationAddress","handleChange","event","console","log","target","value","setState","id","handleSubmit","preventDefault","geoDestiny","fromAddress","then","response","lat","lng","results","geometry","location","getpositon","error","displayLocationInfo","position","lng2","coords","longitude","lat2","latitude","loadMap","navigator","geolocation","getCurrentPosition","origin","directionsService","google","maps","DirectionsService","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","componentDidMount","render","GoogleMapExample","props","height","width","url","routes","legs","steps","map","elemen","__html","instructions"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\n\n\n\n\n\n Geocode.setApiKey(\"AIzaSyCTIuglr0yoyg7N3YinUj0xEeKmQCA8VT0\");\n Geocode.enableDebug();\n\n\nclass Map extends  React.Component {\n  state = {\n    directions: [],\n    directionsLocal: [],\n    destination: '',\n    latOrigin:0,\n    lngOrigin:0,\n    latDestin:0,\n    lngDestin:0,\n    destinationAddress:'',\n    \n  };\n  \n    handleChange=(event)=>{\n    console.log(event.target.value);\n    this.setState({[event.target.id] :event.target.value})\n   }\n\n    handleSubmit =(event)=>{\n      event.preventDefault();\n      this.setState({\n          destinationAddress: this.state.destinationAddress,\n      })\n    }\n\n    geoDestiny = ()=>{\n     \n      Geocode.fromAddress(\"california\").then(\n        response => {\n          let { lat, lng } = response.results[0].geometry.location;\n          this.setState({\n            latDestin:lat,\n            lngDestin:lng,\n          })\n          console.log(this.state.latDestin, this.state.lngDestin);\n          this.getpositon();\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    }\n   \n     displayLocationInfo=(position)=>{\n     \n        let lng2 = position.coords.longitude;\n        let lat2 = position.coords.latitude;\n        console.log(`longitude: ${ lat2 } | latitude: ${ lng2 }`);\n       this.setState({\n        latOrigin: lat2,\n        lngOrigin:lng2\n       })\n       console.log('disply'+this.state.lat)\n       \n       this.loadMap()\n       \n     }\n    \n\n\n      getpositon=()=>{\n    \n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(this.displayLocationInfo);\n          \n        } \n\n      }\n\n      loadMap=()=>{\n        console.log(`origin lat: ${this.state.latOrigin}, lng: ${this.state.lngOrigin} `)\n        console.log(`Destino lat:  ${this.state.latDestin}, lng: ${this.state.lngDestin} `)\n        \n        let origin = { lat: this.state.latOrigin, lng: this.state.lngOrigin };\n        let destination = { lat:  this.state.latDestin, lng: this.state.lngDestin };\n        const directionsService =  new google.maps.DirectionsService();\n        directionsService.route(\n          {\n            origin: origin,\n            destination: destination,\n            travelMode: google.maps.TravelMode.DRIVING\n          },\n          (result, status) => {\n            if (status === google.maps.DirectionsStatus.OK) {\n              this.setState({\n                directions: result\n\n              });\n            } else {\n              console.error(`error fetching directions ${result}`);\n            }\n          }\n        );\n      }\n\n  componentDidMount = ()=> {\n    this.geoDestiny()\n    \n\n    console.log('component'+this.state.lat)\n    \n\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 40.756795, lng: -73.954298 }}\n        defaultZoom={13}\n      > \n        <DirectionsRenderer directions={this.state.directions}/>\n       \n      </GoogleMap>\n    ));\n\n    return (\n      <div>\n        <GoogleMapExample          containerElement={<div style={{ height: `500px`, width: \"500px\" }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n\n        <div>\n         <lable htmlFor='description' className='col-sm-1 col-form-label' >URL:</lable>\n            <div class=\"col-sm-11\">\n                <input type='url'  required value={this.state.url}  className='form-control' id='url' onChange={this.handleChange}/>\n            </div>\n         </div>\n       <div>\n       {this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map((elemen)=> (<div> <p dangerouslySetInnerHTML={{ __html: elemen.instructions }}/> </div>)) :''}\n       </div>\n         \n\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}