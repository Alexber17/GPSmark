{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbermudez/Desktop/project/Project5/GPSmark/gpsmark/src/components/LocationSearchInput.js\";\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    };\n\n    this.state = {\n      address: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n      placeholder: 'Search Places ...',\n      className: 'location-search-input'\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 41\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#ffffff',\n        cursor: 'pointer'\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 41\n        }\n      }, suggestion.description));\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/alexanderbermudez/Desktop/project/Project5/GPSmark/gpsmark/src/components/LocationSearchInput.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationSearchInput","Component","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","catch","error","state","render","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IACIC,gBADJ,EAEIC,SAFJ,QAGO,2BAHP;;AAKA,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAAkD;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAKnBC,YALmB,GAKJC,OAAO,IAAI;AACtB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KAPkB;;AAAA,SASnBE,YATmB,GASJF,OAAO,IAAI;AACtBP,MAAAA,gBAAgB,CAACO,OAAD,CAAhB,CACKG,IADL,CACUC,OAAO,IAAIV,SAAS,CAACU,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEKD,IAFL,CAEUE,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB,CAFpB,EAGKG,KAHL,CAGWC,KAAK,IAAIH,OAAO,CAACG,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHpB;AAIH,KAdkB;;AAEf,SAAKC,KAAL,GAAa;AAAEV,MAAAA,OAAO,EAAE;AAAX,KAAb;AACH;;AAaDW,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,kBAAD;AACI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWV,OADtB;AAEI,MAAA,QAAQ,EAAE,KAAKD,YAFnB;AAGI,MAAA,QAAQ,EAAE,KAAKG,YAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,CAAC;AAAEU,MAAAA,aAAF;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA,sBAA9B;AAAsDC,MAAAA;AAAtD,KAAD,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,+CACQH,aAAa,CAAC;AACdI,MAAAA,WAAW,EAAE,mBADC;AAEdC,MAAAA,SAAS,EAAE;AAFG,KAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,eAOI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADhB,EAEKF,WAAW,CAACK,GAAZ,CAAgBC,UAAU,IAAI;AAC3B,YAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACZ,yBADY,GAEZ,iBAFN,CAD2B,CAI3B;;AACA,YAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACR;AAAEE,QAAAA,eAAe,EAAE,SAAnB;AAA8BC,QAAAA,MAAM,EAAE;AAAtC,OADQ,GAER;AAAED,QAAAA,eAAe,EAAE,SAAnB;AAA8BC,QAAAA,MAAM,EAAE;AAAtC,OAFN;AAGA,0BACI,6CACQT,sBAAsB,CAACK,UAAD,EAAa;AACnCF,QAAAA,SADmC;AAEnCI,QAAAA;AAFmC,OAAb,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,UAAU,CAACK,WAAlB,CANJ,CADJ;AAUH,KAlBA,CAFL,CAPJ,CANR,CADJ;AAwCH;;AA1D6C","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\n\nclass LocationSearchInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { address: '' };\n    }\n\n    handleChange = address => {\n        this.setState({ address });\n    };\n\n    handleSelect = address => {\n        geocodeByAddress(address)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => console.log('Success', latLng))\n            .catch(error => console.error('Error', error));\n    };\n\n    render() {\n        return (\n            <PlacesAutocomplete\n                value={this.state.address}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                            {...getInputProps({\n                                placeholder: 'Search Places ...',\n                                className: 'location-search-input',\n                            })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map(suggestion => {\n                                const className = suggestion.active\n                                    ? 'suggestion-item--active'\n                                    : 'suggestion-item';\n                                // inline style for demonstration purpose\n                                const style = suggestion.active\n                                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                return (\n                                    <div\n                                        {...getSuggestionItemProps(suggestion, {\n                                            className,\n                                            style,\n                                        })}\n                                    >\n                                        <span>{suggestion.description}</span>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}