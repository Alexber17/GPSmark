{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbermudez/Desktop/project/Project5/gpsmark/src/components/Map.js\";\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { withGoogleMap, withScriptjs, GoogleMap, DirectionsRenderer } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport DirectionInstructions from './Instructions.js';\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: [],\n      directionsLocal: [],\n      latOrigin: 0,\n      lngOrigin: 0,\n      latDestin: 0,\n      lngDestin: 0\n    };\n\n    this.geoDestiny = () => {\n      Geocode.setApiKey(\"AIzaSyCTIuglr0yoyg7N3YinUj0xEeKmQCA8VT0\");\n      Geocode.setLanguage(\"en\");\n      Geocode.enableDebug();\n      Geocode.fromAddress(\"California\").then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.displayLocationInfo = position => {\n      this.geoDestiny();\n      let lng2 = position.coords.longitude;\n      let lat2 = position.coords.latitude;\n      console.log(`longitude: ${lat2} | latitude: ${lng2}`);\n      this.setState({\n        latOrigin: lat2,\n        lngOrigin: lng2\n      });\n      console.log('disply' + this.state.lat);\n      this.loadMap();\n    };\n\n    this.getpositon = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.displayLocationInfo);\n      }\n    };\n\n    this.loadMap = () => {\n      let origin = {\n        lat: this.state.latOrigin,\n        lng: this.state.lngOrigin\n      };\n      let destination = {\n        lat: 41.756795,\n        lng: -78.954298\n      };\n      const directionsService = new google.maps.DirectionsService();\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    };\n\n    this.componentDidMount = async () => {\n      this.getpositon();\n      console.log('component' + this.state.lat);\n    };\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      defaultCenter: {\n        lat: 40.756795,\n        lng: -73.954298\n      },\n      defaultZoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }))); // console.log(this.state.directions)\n    // if(this.state.directions.routes ){\n    //     console.log('routes ',this.state.directions.routes[0].legs[0].steps[0].instructions)\n    // }\n    // {console.log(this.state.directions.routes)}\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapExample, {\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `500px`,\n          width: \"500px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 54\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 8\n      }\n    }, this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map(elemen => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 102\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: elemen.instructions\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 108\n      }\n    }), \" \")) : ''));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/alexanderbermudez/Desktop/project/Project5/gpsmark/src/components/Map.js"],"names":["React","Component","withGoogleMap","withScriptjs","GoogleMap","DirectionsRenderer","Geocode","DirectionInstructions","Map","state","directions","directionsLocal","latOrigin","lngOrigin","latDestin","lngDestin","geoDestiny","setApiKey","setLanguage","enableDebug","fromAddress","then","response","lat","lng","results","geometry","location","console","log","error","displayLocationInfo","position","lng2","coords","longitude","lat2","latitude","setState","loadMap","getpositon","navigator","geolocation","getCurrentPosition","origin","destination","directionsService","google","maps","DirectionsService","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","componentDidMount","render","GoogleMapExample","props","height","width","routes","legs","steps","map","elemen","__html","instructions"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport DirectionInstructions from './Instructions.js'\n\n\n\n\n\n\n\nclass Map extends Component {\n  state = {\n    directions: [],\n    directionsLocal: [],\n    latOrigin:0,\n    lngOrigin:0,\n    latDestin:0,\n    lngDestin:0,\n    \n  };\n\n    geoDestiny =()=>{\n      Geocode.setApiKey(\"AIzaSyCTIuglr0yoyg7N3YinUj0xEeKmQCA8VT0\");\n      Geocode.setLanguage(\"en\");\n      Geocode.enableDebug();\n      Geocode.fromAddress(\"California\").then(\n        response => {\n          const { lat, lng } = response.results[0].geometry.location;\n          console.log(lat, lng);\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    }\n   \n     displayLocationInfo=(position)=>{\n      this.geoDestiny()\n        let lng2 = position.coords.longitude;\n        let lat2 = position.coords.latitude;\n        console.log(`longitude: ${ lat2 } | latitude: ${ lng2 }`);\n       this.setState({\n        latOrigin: lat2,\n        lngOrigin:lng2\n       })\n       console.log('disply'+this.state.lat)\n     \n       this.loadMap()\n     }\n    \n\n\n  getpositon=()=>{\n \n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.displayLocationInfo);\n      \n    } \n\n  }\n\n  loadMap=()=>{\n\n    let origin = { lat: this.state.latOrigin, lng: this.state.lngOrigin };\n    let destination = { lat: 41.756795, lng: -78.954298 };\n    const directionsService =  new google.maps.DirectionsService();\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n\n  componentDidMount = async ()=> {\n    this.getpositon();\n\n    console.log('component'+this.state.lat)\n    \n\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 40.756795, lng: -73.954298 }}\n        defaultZoom={13}\n      > \n        <DirectionsRenderer directions={this.state.directions}/>\n       \n      </GoogleMap>\n    ));\n    // console.log(this.state.directions)\n\n    // if(this.state.directions.routes ){\n       \n\n    //     console.log('routes ',this.state.directions.routes[0].legs[0].steps[0].instructions)\n        \n    // }\n    \n    // {console.log(this.state.directions.routes)}\n    return (\n      <div>\n             \n\n        \n\n        <GoogleMapExample          containerElement={<div style={{ height: `500px`, width: \"500px\" }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n       <div>\n       {this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map((elemen)=> (<div> <p dangerouslySetInnerHTML={{ __html: elemen.instructions }}/> </div>)) :''}\n       </div>\n         \n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}