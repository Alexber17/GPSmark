{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbermudez/Desktop/project/Project5/gpsmark/src/components/Map.js\";\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { withGoogleMap, withScriptjs, GoogleMap, DirectionsRenderer } from \"react-google-maps\";\nimport DirectionInstructions from './Instructions.js';\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: [],\n      directionsLocal: [],\n      lat: 0,\n      lng: 0\n    };\n  }\n\n  componentDidMount() {\n    const origin = {\n      lat: 34.043220,\n      lng: -84.221490\n    };\n    const destination = {\n      lat: 34.043220,\n      lng: -84.221490\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      return origin = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n    }\n\n    const directionsService = new google.maps.DirectionsService();\n    console.log(origin);\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      defaultCenter: {\n        lat: 40.756795,\n        lng: -73.954298\n      },\n      defaultZoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }))); // console.log(this.state.directions)\n    // if(this.state.directions.routes ){\n    //     console.log('routes ',this.state.directions.routes[0].legs[0].steps[0].instructions)\n    // }\n    // {console.log(this.state.directions.routes)}\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapExample, {\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `500px`,\n          width: \"500px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 54\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 8\n      }\n    }, this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map(elemen => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 102\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: elemen.instructions\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 108\n      }\n    }), \" \")) : ''));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/alexanderbermudez/Desktop/project/Project5/gpsmark/src/components/Map.js"],"names":["React","Component","withGoogleMap","withScriptjs","GoogleMap","DirectionsRenderer","DirectionInstructions","Map","state","directions","directionsLocal","lat","lng","componentDidMount","origin","destination","navigator","geolocation","getCurrentPosition","displayLocationInfo","position","coords","latitude","longitude","directionsService","google","maps","DirectionsService","console","log","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","error","render","GoogleMapExample","props","height","width","routes","legs","steps","map","elemen","__html","instructions"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport DirectionInstructions from './Instructions.js'\n\n\n\n\n\nclass Map extends Component {\n  state = {\n    directions: [],\n    directionsLocal: [],\n    lat:0,\n    lng:0\n  };\n\n\n\n  componentDidMount() {\n    const origin = { lat: 34.043220, lng: -84.221490 };\n    const destination = { lat: 34.043220, lng: -84.221490 };\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(displayLocationInfo);\n      }\n      \n      function displayLocationInfo(position) {      \n        return  origin = { lat: position.coords.latitude, lng: position.coords.longitude };\n      }\n\n\n    const directionsService =  new google.maps.DirectionsService();\n\n    console.log(origin)\n    \n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 40.756795, lng: -73.954298 }}\n        defaultZoom={13}\n      > \n        <DirectionsRenderer directions={this.state.directions}/>\n       \n      </GoogleMap>\n    ));\n    // console.log(this.state.directions)\n\n    // if(this.state.directions.routes ){\n       \n\n    //     console.log('routes ',this.state.directions.routes[0].legs[0].steps[0].instructions)\n        \n    // }\n    \n    // {console.log(this.state.directions.routes)}\n    return (\n      <div>\n             \n\n        \n\n        <GoogleMapExample          containerElement={<div style={{ height: `500px`, width: \"500px\" }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n       <div>\n       {this.state.directions.routes ? this.state.directions.routes[0].legs[0].steps.map((elemen)=> (<div> <p dangerouslySetInnerHTML={{ __html: elemen.instructions }}/> </div>)) :''}\n       </div>\n         \n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}